#!/bin/bash

# ===================================================
# VPS 初始化脚本
# 功能：
# 1. 配置SSH密钥认证
# 2. 禁用密码登录提高安全性
# 3. 配置防火墙
# 4. 设置SSL证书自动更新
# ===================================================

# 加载公共函数（如果存在）
if [[ -f "/usr/local/shpack/lib/common.sh" ]]; then
    source "/usr/local/shpack/lib/common.sh"
else
    # 定义颜色
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[0;33m'
    BLUE='\033[0;34m'
    NC='\033[0m' # 无颜色

    # 简易日志函数
    print_message() {
        local type=$1
        local message=$2
        local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
        
        case $type in
            "info") 
                echo -e "${GREEN}[INFO]${NC} $message" 
                ;;
            "warn") 
                echo -e "${YELLOW}[WARN]${NC} $message" 
                ;;
            "error") 
                echo -e "${RED}[ERROR]${NC} $message" 
                ;;
            *) 
                echo -e "$message" 
                ;;
        esac
    }
fi

# 定义变量
LOG_FILE="/usr/local/shpack/logs/setup_vps.log"
SSH_CONFIG="/etc/ssh/sshd_config"
SSH_DIR="/root/.ssh"
SSL_DIR="/root/ssl"
SSL_SOURCE="ssl.colorduck.me/cert.tar.gz"
SSL_UPDATE_CRON="0 0 * * 0 cd ${SSL_DIR} && rm -rf cert* && wget ${SSL_SOURCE} && tar -zxf cert.tar.gz"

# 确保日志目录存在
mkdir -p "$(dirname "$LOG_FILE")" &>/dev/null
touch "$LOG_FILE"

# 记录日志到文件
log_message() {
    local type=$1
    local message=$2
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    echo "$timestamp [$type] $message" >> "$LOG_FILE"
    print_message "$type" "$message"
}

# 检查命令执行状态
check_command() {
    if [ $? -ne 0 ]; then
        log_message "error" "命令执行失败: $1"
        return 1
    else
        log_message "info" "命令执行成功: $1"
        return 0
    fi
}

# 检测操作系统类型和包管理器
detect_os() {
    if command -v apt &> /dev/null; then
        PKG_MANAGER="apt"
        PKG_UPDATE="apt update"
        PKG_INSTALL="apt install -y"
    elif command -v yum &> /dev/null; then
        PKG_MANAGER="yum"
        PKG_UPDATE="yum update -y"
        PKG_INSTALL="yum install -y"
    elif command -v dnf &> /dev/null; then
        PKG_MANAGER="dnf"
        PKG_UPDATE="dnf check-update"
        PKG_INSTALL="dnf install -y"
    else
        log_message "error" "不支持的操作系统，无法确定包管理器"
        exit 1
    fi
    
    log_message "info" "检测到包管理器: $PKG_MANAGER"
}

# 安装必要的软件包
install_packages() {
    local packages=("$@")
    local missing_pkgs=()
    
    # 检查哪些包需要安装
    for pkg in "${packages[@]}"; do
        if ! command -v "$pkg" &> /dev/null; then
            missing_pkgs+=("$pkg")
        fi
    done
    
    # 如果有缺失的包，就安装它们
    if [ ${#missing_pkgs[@]} -gt 0 ]; then
        log_message "info" "安装缺失的软件包: ${missing_pkgs[*]}"
        eval "$PKG_UPDATE" &>/dev/null
        for pkg in "${missing_pkgs[@]}"; do
            log_message "info" "安装 $pkg..."
            eval "$PKG_INSTALL $pkg" &>/dev/null
            check_command "安装 $pkg"
        done
    else
        log_message "info" "所有必要的软件包都已安装"
    fi
}

# 设置SSH密钥
setup_ssh_key() {
    log_message "info" "开始设置SSH密钥..."
    
    # 确保.ssh目录存在并具有正确的权限
    mkdir -p "$SSH_DIR"
    chmod 700 "$SSH_DIR"
    
    echo -e "\n选择SSH密钥选项:"
    echo -e "${BLUE}1)${NC} 输入自定义SSH公钥"
    echo -e "${BLUE}2)${NC} 使用默认公钥"
    read -p "请输入选项 [1-2] (默认: 2): " ssh_option
    
    local ssh_key=""
    case ${ssh_option:-2} in
        1)
            read -p "请输入您的SSH公钥: " user_key
            ssh_key="$user_key"
            ;;
        2|*)
            ssh_key="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC0j4PTgKgnLmK/IV/oXkpWJomlkE9X7x9M6O4JExkTWJsZNG0SBma2bpW39ronv6jx+TIVkeWpIEjNkwwPRcnDrmekmtu1Hsi9jFgK7R8WmpeX2U6l6ieBnomyH8HBSNNWRCHF62EzaJ1LLN6FpuJ4x6h3S2bAqePLYvtwvV2/v+XeR8Samh3lLMvW0b3oq8PpvNMUHZkwlPcGUxt9enJaNLFEP/8+g7pAbN2bn4T5ax0+au75svpoavzeZtS3QS0oNYJ1DZQ6eNzrQszB9uhNJfb+oupuQoGhMR61dEV0fF+gpjTuukmB8XLM9IsmhkVflyg4w5L/ArCHR+5hXjrXL+qjN8wXL22zb+IwYQQT684JXzpOBx+GFV9iCR02MAVIrb6oEHT4eZWuXM9fID+KyJd9aOlBxpEvHQAL/HIX3+z2Pa9TsjR3BKEGwrgmv6wIe44npi36M7BmyOjBTAgiH9TDEQeT68A3rjcgtJiPv1CjLnVu5mgxAgUZ0EUvjIc= zhang tianyi@Color
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOXp8mhYX7dJOQymyVksL+smyo4Qf7ccdRJsuNycaCcC Generated By Termius"
            ;;
    esac
    
    # 检查authorized_keys文件是否已经包含了这个密钥
    if [[ -f "${SSH_DIR}/authorized_keys" ]]; then
        if ! grep -q "$ssh_key" "${SSH_DIR}/authorized_keys"; then
            echo -e "$ssh_key" >> "${SSH_DIR}/authorized_keys"
            check_command "添加SSH密钥到authorized_keys"
        else
            log_message "info" "SSH密钥已存在，无需添加"
        fi
    else
        echo -e "$ssh_key" > "${SSH_DIR}/authorized_keys"
        check_command "创建authorized_keys文件"
    fi
    
    chmod 600 "${SSH_DIR}/authorized_keys"
    log_message "info" "SSH密钥设置完成"
}

# 配置SSH服务器
configure_ssh() {
    log_message "info" "配置SSH服务器..."
    
    local config_changed=false
    
    # 禁用密码认证
    if grep -q "^[#]PasswordAuthentication" "$SSH_CONFIG"; then
        sed -i 's/^[#]PasswordAuthentication.*/PasswordAuthentication no/' "$SSH_CONFIG"
        config_changed=true
    elif grep -q "^PasswordAuthentication" "$SSH_CONFIG"; then
        sed -i 's/^PasswordAuthentication.*/PasswordAuthentication no/' "$SSH_CONFIG"
        config_changed=true
    else
        echo "PasswordAuthentication no" >> "$SSH_CONFIG"
        config_changed=true
    fi
    
    # 启用公钥认证
    if grep -q "^[#]PubkeyAuthentication" "$SSH_CONFIG"; then
        sed -i 's/^[#]PubkeyAuthentication.*/PubkeyAuthentication yes/' "$SSH_CONFIG"
        config_changed=true
    elif grep -q "^PubkeyAuthentication" "$SSH_CONFIG"; then
        sed -i 's/^PubkeyAuthentication.*/PubkeyAuthentication yes/' "$SSH_CONFIG"
        config_changed=true
    else
        echo "PubkeyAuthentication yes" >> "$SSH_CONFIG"
        config_changed=true
    fi
    
    if $config_changed; then
        log_message "info" "SSH配置已修改，重启SSH服务..."
        systemctl restart sshd
        check_command "重启SSH服务"
    else
        log_message "info" "SSH配置无变化，无需重启"
    fi
}

# 配置防火墙
setup_firewall() {
    log_message "info" "配置防火墙..."
    
    # 确保ufw已安装
    if ! command -v ufw &> /dev/null; then
        log_message "info" "防火墙(ufw)未安装，正在安装..."
        eval "$PKG_UPDATE" &>/dev/null
        eval "$PKG_INSTALL ufw" &>/dev/null
        check_command "安装ufw"
    fi
    
    # 确保curl已安装
    if ! command -v curl &> /dev/null; then
        log_message "info" "curl未安装，正在安装..."
        eval "$PKG_UPDATE" &>/dev/null
        eval "$PKG_INSTALL curl" &>/dev/null
        check_command "安装curl"
    fi
    
    # 允许HTTP和HTTPS
    log_message "info" "允许HTTP和HTTPS流量..."
    ufw allow http &>/dev/null
    check_command "允许HTTP流量"
    ufw allow https &>/dev/null
    check_command "允许HTTPS流量"
    
    # 检测和添加SSH端口
    local ssh_port=$(grep -E "^#?Port " "$SSH_CONFIG" | awk '{print $2}')
    if [ -n "$ssh_port" ]; then
        log_message "info" "检测到SSH端口: $ssh_port"
        ufw allow "$ssh_port/tcp" &>/dev/null
        check_command "允许SSH端口 $ssh_port"
    else
        log_message "info" "未检测到自定义SSH端口，使用默认端口22"
        ufw allow 22/tcp &>/dev/null
        check_command "允许SSH端口 22"
    fi
    
    # 启用防火墙（如果尚未启用）
    if ! ufw status | grep -q "Status: active"; then
        log_message "info" "启用防火墙..."
        echo "y" | ufw enable &>/dev/null
        check_command "启用防火墙"
    else
        log_message "info" "防火墙已经处于启用状态"
    fi
}

# 设置SSL证书自动更新
setup_ssl_cert() {
    log_message "info" "设置SSL证书自动更新..."
    
    # 创建SSL目录
    mkdir -p "$SSL_DIR"
    check_command "创建SSL目录"
    
    # 添加或更新cron任务
    local cron_exists=$(crontab -l 2>/dev/null | grep -F "$SSL_UPDATE_CRON" | wc -l)
    
    if [ "$cron_exists" -eq 0 ]; then
        log_message "info" "添加SSL证书更新定时任务"
        (crontab -l 2>/dev/null || echo "") | { cat; echo "$SSL_UPDATE_CRON"; } | crontab -
        check_command "添加cron任务"
    else
        log_message "info" "SSL证书更新定时任务已存在"
    fi
    
    # 立即更新证书
    log_message "info" "立即更新SSL证书..."
    cd "$SSL_DIR" && rm -rf cert* && wget -q "$SSL_SOURCE" && tar -zxf cert.tar.gz
    check_command "更新SSL证书"
}

# 主函数
main() {
    log_message "info" "开始VPS初始化..."
    
    # 检测操作系统和包管理器
    detect_os
    
    # 安装必要的软件包
    install_packages ufw curl wget
    
    # 设置SSH密钥
    setup_ssh_key
    
    # 配置SSH服务器
    configure_ssh
    
    # 设置防火墙
    setup_firewall
    
    # 设置SSL证书自动更新
    setup_ssl_cert
    
    log_message "info" "VPS初始化完成！"
    echo -e "\n${GREEN}所有任务已成功完成！${NC}"
}

# 执行主函数
main