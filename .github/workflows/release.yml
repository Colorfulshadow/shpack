name: Release on Push

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

        with:
          fetch-depth: 0
    
      - name: Debug List all tags
        run: git tag

      - name: Get latest release tag
        id: get_latest_release
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "0.0.0")
          echo "Latest tag: $latest_tag"
          echo "tag=$latest_tag" >> $GITHUB_ENV

      - name: Increment version number
        id: increment_version
        run: |
          latest_tag=${{ steps.get_latest_release.outputs.tag }}
          IFS='.' read -r -a version_parts <<< "$latest_tag"
          minor=${version_parts[2]}
          new_minor=$((minor + 1))
          new_tag="${version_parts[0]}.${version_parts[1]}.$new_minor"
          echo "New tag: $new_tag"
          echo "::set-output name=new_tag::$new_tag"

      - name: Create new tag and push to repository
        run: |
          new_tag=${{ steps.increment_version.outputs.new_tag }}
          git tag $new_tag
          git push origin $new_tag
      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "refs/tags/${{ env.new_tag }}" >/dev/null 2>&1; then
            echo "Tag already exists."
            exit 1
          else
            echo "Tag does not exist."
          fi
          
      - name: Checkout the newly created tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.increment_version.outputs.new_tag }}

      - name: Create new release
        if: success()
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}
          release_name: Release ${{ env.new_tag }}
          draft: false
          prerelease: false

      - name: Create shpack directory
        run: mkdir -p shpack

      - name: Copy repository content to shpack
        run: rsync -av --progress ./ ./shpack --exclude shpack

      - name: Create tarball
        run: tar -czvf shpack.tar.gz shpack

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: shpack.tar.gz
          asset_name: shpack.tar.gz
          asset_content_type: application/gzip
